# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc eb6d5d0c7903ceea788bc9911502516fcd2489cbc5746cd03ebecfa6f6d505e0 # shrinks to x = 0.0, y = 7.896442825963585
cc 0a3028e9e7e99d26fa059e2cb91b850bae864a70fae2ab776963383e23a7f11d # shrinks to scenario = MultiContextScenario { expressions: [ContextualExpression { expr: DynamicExpr { ast: Mul(Mul(Sub(Constant(-6.2964508867566105), Variable(1)), Mul(Constant(-0.40437625250792664), Constant(7.420555685003226))), Mul(Sub(Constant(-0.5910073177287956), Variable(1)), Mul(Constant(-7.0691383500421745), Constant(-2.168943786022597)))), registry: RefCell { value: VariableRegistry { index_to_type: [Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c)), Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c))] } } }, context_id: 1720, used_variables: {1, 0}, registry: RefCell { value: VariableRegistry { index_to_type: [] } } }], complexity: ScopeMergingComplexity { max_contexts: 2, max_expr_depth: 3, max_variables_per_context: 2, max_evaluation_attempts: 5 } }
cc dfa6bffe259add67507c5707a4ccbf6a2e1859ed743d63bb37d47e97142ba63e # shrinks to scenario = MultiContextScenario { expressions: [ContextualExpression { expr: DynamicExpr { ast: Add(Mul(Add(Variable(1), Variable(1)), Div(Constant(5.379203345018521), Add(Constant(8.126600677591593), Constant(1.0)))), Sub(Div(Variable(1), Add(Variable(1), Constant(1.0))), Add(Variable(1), Variable(1)))), registry: RefCell { value: VariableRegistry { index_to_type: [Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c)), Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c))] } } }, context_id: 2384, used_variables: {1, 0}, registry: RefCell { value: VariableRegistry { index_to_type: [] } } }], complexity: ScopeMergingComplexity { max_contexts: 2, max_expr_depth: 3, max_variables_per_context: 2, max_evaluation_attempts: 5 } }
cc fbfb5b163a7fa2c0ac2cf8d0a55658809abb91438de3f2e3e807627d5f68bc3e # shrinks to scenario = MultiContextScenario { expressions: [ContextualExpression { expr: DynamicExpr { ast: Sub(Div(Add(Variable(1), Constant(6.343372496113389)), Add(Div(Constant(9.867994160909817), Add(Variable(1), Constant(1.0))), Constant(1.0))), Add(Div(Variable(1), Add(Constant(-4.7508176183982265), Constant(1.0))), Div(Variable(1), Add(Variable(1), Constant(1.0))))), registry: RefCell { value: VariableRegistry { index_to_type: [Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c)), Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c))] } } }, context_id: 5024, used_variables: {1}, registry: RefCell { value: VariableRegistry { index_to_type: [Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c)), Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c))] } } }, ContextualExpression { expr: DynamicExpr { ast: Div(Add(Mul(Variable(0), Variable(0)), Sub(Variable(0), Constant(-7.295880373549997))), Add(Mul(Mul(Variable(0), Variable(0)), Add(Variable(0), Variable(0))), Constant(1.0))), registry: RefCell { value: VariableRegistry { index_to_type: [Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c))] } } }, context_id: 5025, used_variables: {0}, registry: RefCell { value: VariableRegistry { index_to_type: [Float(TypeId(0xc45c25bfe577a84e0b073a6684adcb7c))] } } }], complexity: ScopeMergingComplexity { max_contexts: 2, max_expr_depth: 3, max_variables_per_context: 2, max_evaluation_attempts: 5 } }
