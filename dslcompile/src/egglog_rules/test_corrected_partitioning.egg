; Test Corrected Variable Partitioning with Integer Variable Indices
(include "corrected_partitioning.egg")

; Test the challenging case: 3 + 2*x0 + 3*x1 + 4 + x0
; Using integer indices: x0 = variable 0, x1 = variable 1
; Expected result: 7 + 3*x0 + 3*x1 (fully partitioned)
(let complex_expr (Add (Add (Add (Add (Num 3.0) (Mul (Num 2.0) (Var 0))) 
                                (Mul (Num 3.0) (Var 1))) 
                           (Num 4.0)) 
                      (Var 0)))

(run-schedule (repeat 30 (saturate (run))))
(query-extract complex_expr)

; Test simpler cases to verify they still work with integer indices
(let simple1 (Add (Var 0) (Var 0)))  ; x0 + x0 → 2*x0
(let simple2 (Add (Mul (Num 2.0) (Var 0)) (Mul (Num 3.0) (Var 0))))  ; 2*x0 + 3*x0 → 5*x0

(run-schedule (repeat 10 (saturate (run))))
(query-extract simple1)
(query-extract simple2)

; Test constant collection
(let constants (Add (Add (Num 1.0) (Num 2.0)) (Add (Num 3.0) (Num 4.0))))
(run-schedule (repeat 10 (saturate (run))))
(query-extract constants)

; Test cross-variable terms: 2*x0 + 3*x1 + x0 → 3*x0 + 3*x1
(let cross_vars (Add (Add (Mul (Num 2.0) (Var 0)) (Mul (Num 3.0) (Var 1))) (Var 0)))
(run-schedule (repeat 15 (saturate (run))))
(query-extract cross_vars) 