; Corrected Variable Partitioning - Using Integer Variable Indices
; This matches the actual DSLCompile ASTRepr::Variable(usize) structure

(datatype Math
  (Num f64)
  (Var i64)  ; Corrected: Variables are integer indices, not strings
  (Add Math Math)
  (Mul Math Math)
)

; ========================================
; STEP 1: FLATTEN ASSOCIATIVE STRUCTURES  
; ========================================

; Right-associate additions to create a canonical form
; (a + b) + c → a + (b + c)
(rewrite (Add (Add ?a ?b) ?c) (Add ?a (Add ?b ?c)))

; ========================================
; STEP 2: BUBBLE CONSTANTS TO THE RIGHT
; ========================================

; Move constants towards the right in right-associated chains
; x + 5 → 5 + x (when x is not a constant)
(rewrite (Add ?x (Num ?c)) (Add (Num ?c) ?x))

; Deeper bubbling: x + (y + 5) → x + (5 + y)  
(rewrite (Add ?x (Add ?y (Num ?c))) (Add ?x (Add (Num ?c) ?y)))

; Collect adjacent constants: a + (b + rest) → (a+b) + rest
(rewrite (Add (Num ?a) (Add (Num ?b) ?rest)) 
         (Add (Num (+ ?a ?b)) ?rest))

; ========================================
; STEP 3: COLLECT LIKE VARIABLES
; ========================================

; Basic: x + x → 2*x (same variable index)
(rewrite (Add (Var ?v) (Var ?v)) (Mul (Num 2.0) (Var ?v)))

; In chains: x + (x + rest) → 2*x + rest (same variable index)
(rewrite (Add (Var ?v) (Add (Var ?v) ?rest)) 
         (Add (Mul (Num 2.0) (Var ?v)) ?rest))

; Coefficient collection: a*x + b*x → (a+b)*x (same variable index)
(rewrite (Add (Mul (Num ?a) (Var ?v)) (Mul (Num ?b) (Var ?v)))
         (Mul (Num (+ ?a ?b)) (Var ?v)))

; Mixed coefficient chains: a*x + (x + rest) → (a+1)*x + rest
(rewrite (Add (Mul (Num ?a) (Var ?v)) (Add (Var ?v) ?rest))
         (Add (Mul (Num (+ ?a 1.0)) (Var ?v)) ?rest))

; Reverse: x + (a*x + rest) → (1+a)*x + rest  
(rewrite (Add (Var ?v) (Add (Mul (Num ?a) (Var ?v)) ?rest))
         (Add (Mul (Num (+ 1.0 ?a)) (Var ?v)) ?rest))

; Handle nested coefficient collection: a*x + (b*x + rest) → (a+b)*x + rest
(rewrite (Add (Mul (Num ?a) (Var ?v)) (Add (Mul (Num ?b) (Var ?v)) ?rest))
         (Add (Mul (Num (+ ?a ?b)) (Var ?v)) ?rest))

; Handle mixed variable cross-collection: (a*x + b*y) + x → (a+1)*x + b*y
(rewrite (Add (Add (Mul (Num ?a) (Var ?v)) (Mul (Num ?b) (Var ?w))) (Var ?v))
         (Add (Mul (Num (+ ?a 1.0)) (Var ?v)) (Mul (Num ?b) (Var ?w))))

; ========================================
; STEP 4: CONSTANT FOLDING & IDENTITIES
; ========================================

(rewrite (Add (Num ?a) (Num ?b)) (Num (+ ?a ?b)))
(rewrite (Mul (Num ?a) (Num ?b)) (Num (* ?a ?b)))
(rewrite (Add (Num 0.0) ?x) ?x)
(rewrite (Add ?x (Num 0.0)) ?x)
(rewrite (Mul (Num 1.0) ?x) ?x)
(rewrite (Mul ?x (Num 1.0)) ?x)
(rewrite (Mul (Num 0.0) ?x) (Num 0.0))
(rewrite (Mul ?x (Num 0.0)) (Num 0.0)) 