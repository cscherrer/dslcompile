; ========================================
; SUM RUNTIME COST MODELING FOR DSLCOMPILE
; ========================================
; Accurate cost modeling for sum operations where AST size != runtime complexity
; Most operations use egglog's default AST-based costing, but sums need special handling
; because their runtime cost is O(collection_size * inner_expression_complexity)

; ========================================
; SIMPLE TEST - CONCRETE COST ASSIGNMENT
; ========================================
; Start with very simple concrete cost assignment to test if set-cost works

; Test with a concrete expression first
(set-cost (Add (Num 1.0) (Num 2.0)) 5000)

; ========================================
; COST MODELING PRINCIPLES
; ========================================
; 1. Cost formula: cost(Σ(expr)) = collection_size * cost(expr)
; 2. DEFAULT_COLLECTION_SIZE = 1000 provides heuristic for unknown sizes  
; 3. Costs reflect actual runtime: operations_per_element * collection_size + overhead
; 4. Factored forms have lower total cost because they minimize operations in loops
; 5. All other operations (Add, Mul, etc. outside of sums) use egglog's default AST-based costing
; 6. This approach only intervenes where AST size doesn't correlate with runtime complexity

; ========================================
; TUNING NOTES
; ========================================
; Once basic set-cost works, we'll add rules to set costs for sum patterns:
; - Unfactored sums: Σ(a*x + b*x) costs 3000 operations (1000 * 3 ops per element)
; - Factored forms: (a+b)*Σ(x) costs 1001 operations (1000 + 1 multiply)
; - Cost ratio: 3000:1001 ≈ 3:1 speedup reflecting actual performance difference