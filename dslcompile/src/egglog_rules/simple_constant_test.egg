; Simple Constant Propagation Test
(include "summation_with_collections.egg")

; Test just the range size calculation
(let range_sum (Sum (Range (Num 1.0) (Num 3.0))))

; Test basic subtraction
(let simple_sub (Sub (Num 3.0) (Num 1.0)))

; Test addition  
(let simple_add (Add (Sub (Num 3.0) (Num 1.0)) (Num 1.0)))

; Test the full constant map
(let const_map (Sum (Map (ConstantFunc (Num 5.0)) (Range (Num 1.0) (Num 3.0)))))

(run-schedule (repeat 10 (saturate (run))))

(query-extract range_sum)
(query-extract simple_sub)  
(query-extract simple_add)
(query-extract const_map)

; Simple Constant Evaluation Test
; Test basic constant folding before complex summation rules

(datatype Math
  (Num f64)
  (Add Math Math)
  (Sub Math Math)
  (Mul Math Math)
)

; Basic constant folding
(rewrite (Add (Num ?a) (Num ?b)) (Num (+ ?a ?b)))
(rewrite (Sub (Num ?a) (Num ?b)) (Num (- ?a ?b)))
(rewrite (Mul (Num ?a) (Num ?b)) (Num (* ?a ?b)))

; Test simple constant evaluation
(let test1 (Add (Num 1.0) (Num 2.0)))  ; Should become 3.0
(let test2 (Sub (Num 3.0) (Num 1.0)))  ; Should become 2.0  
(let test3 (Mul (Num 5.0) (Num 3.0)))  ; Should become 15.0

; Test range size calculation: 3 - 1 + 1 = 3
(let range_size (Add (Sub (Num 3.0) (Num 1.0)) (Num 1.0)))  ; Should become 3.0

(run 5)
(query-extract test1)
(query-extract test2)
(query-extract test3)
(query-extract range_size) 