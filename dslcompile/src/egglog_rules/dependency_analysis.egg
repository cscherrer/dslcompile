; ========================================
; MINIMAL DEPENDENCY ANALYSIS FOR DSLCOMPILE
; ========================================
; Essential dependency tracking structure for future expansion
; Focuses on getting the basic parsing to work first

; ========================================
; BASIC DATATYPES
; ========================================

; Use egglog's built-in bool type for dependency checking
; This provides `true`, `false`, `or`, `and`, `not` operators automatically

; ========================================
; VARIABLE DEPENDENCY TRACKING SYSTEM
; ========================================

; Set of variable indices for dependency tracking
(datatype VarSet
  (EmptySet)                         ; No dependencies
  (SingleVar i64)                    ; Single variable dependency  
  (UnionSet VarSet VarSet)           ; Union of two dependency sets
)

; ========================================
; CORE DEPENDENCY FUNCTIONS
; ========================================

; Core dependency analysis functions - computed automatically from structure
(function free-vars (Math) VarSet :merge (UnionSet old new))
(function bound-vars (Math) VarSet :merge (UnionSet old new))
(function contains-var (VarSet i64) bool :merge (or old new))
(function is-independent-of (Math i64) bool :merge (or old new))

; ========================================
; BASIC DEPENDENCY COMPUTATION RULES
; ========================================

; Constants have no dependencies
(rule ((= expr (Num ?val)))
      ((set (free-vars expr) (EmptySet))
       (set (bound-vars expr) (EmptySet))))

; UserVars contribute their index to free vars
(rule ((= expr (UserVar ?idx)))
      ((set (free-vars expr) (SingleVar ?idx))
       (set (bound-vars expr) (EmptySet))))

; BoundVars are not free but contribute to bound vars
(rule ((= expr (BoundVar ?idx)))
      ((set (free-vars expr) (EmptySet))
       (set (bound-vars expr) (SingleVar ?idx))))

; ========================================
; VARSET MEMBERSHIP CHECKING (SIMPLIFIED)
; ========================================

; Note: Complex membership checking rules are omitted for now
; The contains-var function is defined but without specific computation rules
; This allows the dependency analysis infrastructure to be used by optimization rules

; ========================================
; RULESETS FOR PHASED OPTIMIZATION
; ========================================

; Create rulesets for controlled optimization phases
(ruleset dependency_analysis)
(ruleset safe_optimizations)

; Constructor for factored lambda expressions (if needed for optimization rules)
(constructor FactoredLambda (Math Lambda) Lambda) 