; Minimal Core Mathematical Rules for DSLCompile
; Start simple, add rules only when examples require them

; ========================================
; STAGED MATHEMATICAL OPTIMIZATION RULES
; ========================================
; 
; Note: Datatypes are defined in core_datatypes.egg
; This file contains staged rewrite rules that avoid conflicts

; ========================================
; BASIC ESSENTIAL RULES
; ========================================

; Constant folding rules - these are always safe
(rewrite (Add (Num ?a) (Num ?b)) (Num (+ ?a ?b)))
(rewrite (Mul (Num ?a) (Num ?b)) (Num (* ?a ?b)))
(rewrite (Div (Num ?a) (Num ?b)) (Num (/ ?a ?b)))
(rewrite (Sub (Num ?a) (Num ?b)) (Num (- ?a ?b)))

; Basic identity rules - safe and always beneficial
(rewrite (Add (Num 0.0) ?x) ?x)
(rewrite (Add ?x (Num 0.0)) ?x)
(rewrite (Mul (Num 1.0) ?x) ?x)
(rewrite (Mul ?x (Num 1.0)) ?x)
(rewrite (Mul (Num 0.0) ?x) (Num 0.0))
(rewrite (Mul ?x (Num 0.0)) (Num 0.0))

; Advanced identity rules
(rewrite (Sub ?x ?x) (Num 0.0))
(rewrite (Div ?x ?x) (Num 1.0))
(rewrite (Pow ?x (Num 1.0)) ?x)
(rewrite (Pow ?x (Num 0.0)) (Num 1.0))

; Let binding evaluation - essential for CSE
(rewrite (Let ?id ?expr (BoundVar ?id)) ?expr)

; Empty sum - trivial rule
(rewrite (Sum (Empty)) (Num 0.0))
(rewrite (Sum (Singleton ?expr)) ?expr)

 