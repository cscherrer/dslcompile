; Final Clean Test - Using Clean Rules Only
(include "clean_summation_rules.egg")

; Test essential features
(let test_empty (Sum (Empty)))                                        ; → 0.0
(let test_singleton (Sum (Singleton (Num 42.0))))                     ; → 42.0  
(let test_range (Sum (Range (Num 1.0) (Num 3.0))))                   ; → 6.0
(let test_multiply (Mul (Num 5.0) (Sum (Range (Num 1.0) (Num 3.0))))) ; → 30.0
(let test_var_collect (Add (Var 0) (Var 0)))                         ; → 2*Var(0)

; Test priority optimizations
(let test_factor (Sum (Map (LambdaFunc 0 (Mul (Num 3.0) (Var 0))) (Range (Num 1.0) (Num 3.0)))))  ; → 3 * 6 = 18
(let test_constant_map (Sum (Map (ConstantFunc (Num 7.0)) (Range (Num 1.0) (Num 3.0)))))          ; → 7 * 3 = 21

(run 10)
(query-extract test_empty)
(query-extract test_singleton) 
(query-extract test_range)
(query-extract test_multiply)
(query-extract test_var_collect)
(query-extract test_factor)
(query-extract test_constant_map) 