; Core Datatypes for DSLCompile Egglog Rules with Dynamic Cost Support
; Defines the fundamental mathematical expression structure with dynamic cost models

; Include experimental library for dynamic cost support
; This include path should work from within the egglog execution context
; (include "egglog-experimental")

; ========================================
; MATHEMATICAL EXPRESSION DATATYPE WITH DYNAMIC COSTS
; ========================================

(with-dynamic-cost
  (datatype Math
    ; Basic values
    (Num f64)           ; Numeric constants - cost set dynamically
    (UserVar i64)       ; User variables - cost set dynamically based on usage patterns
    (BoundVar i64)      ; Bound variables - cost set dynamically based on binding complexity
    
    ; Binary arithmetic operations - costs set dynamically based on expression complexity
    (Add Math Math)     ; Addition
    (Sub Math Math)     ; Subtraction (used in AST)  
    (Mul Math Math)     ; Multiplication
    (Div Math Math)     ; Division
    (Pow Math Math)     ; Exponentiation
    
    ; Unary operations - costs set dynamically based on computational complexity
    (Neg Math)          ; Negation
    (Ln Math)           ; Natural logarithm
    (Exp Math)          ; Exponential function
    (Sin Math)          ; Sine
    (Cos Math)          ; Cosine
    (Sqrt Math)         ; Square root
    
    ; Let bindings for CSE - costs set dynamically based on binding benefits
    (Let i64 Math Math) ; Let binding: let <bound_id> = expr1 in expr2
  )
)

; ========================================
; COLLECTION AND LAMBDA TYPES WITH DYNAMIC COSTS
; ========================================
; For summation support with dynamic cost optimization

(with-dynamic-cost
  ; Collection types for summation - costs set dynamically based on collection size
  (datatype Collection
    (Empty)
    (Singleton Math)
    (Range Math Math)
    (DataArray i64)
  )

  ; Lambda expressions for mapping - costs set dynamically based on complexity
  (datatype Lambda
    (LambdaFunc i64 Math)
    (Identity)
    (ConstantFunc Math)
  )

  ; Collection operations with dynamic costs
  ; Costs will be set at runtime based on:
  ; - Collection size estimation
  ; - Expression complexity within summations
  ; - Coupling between iteration variables and external parameters
  (constructor Sum (Collection) Math)     ; Cost set dynamically based on collection analysis
  (constructor Map (Lambda Collection) Collection)  ; Cost set dynamically based on lambda complexity
)

; ========================================
; NOTE: REWRITE RULES
; ========================================
; Basic rewrite rules are defined in staged_core_math.egg
; This file focuses on datatype definitions only 