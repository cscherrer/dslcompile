; Simple dependency-aware test based on toomuch.diff ideas
; Demonstrates basic variable dependency tracking

; ========================================
; CORE DATATYPES
; ========================================

(datatype Math
  (Num f64)           ; Numeric constants
  (Variable i64)      ; External variables
  (BoundVar i64)      ; Lambda-bound variables
  (Add Math Math)     ; Addition
  (Mul Math Math)     ; Multiplication
)

; Variable dependency set
(datatype VarSet
  (EmptySet)                         ; No dependencies
  (SingleVar i64)                    ; Single variable dependency  
  (UnionSet VarSet VarSet)           ; Union of two dependency sets
)

; ========================================
; DEPENDENCY TRACKING FUNCTIONS
; ========================================

; Functions to track variable dependencies
(function free-vars (Math) VarSet :merge (UnionSet old new))
(function contains-var (VarSet i64) i64 :merge (max old new))
(function is-independent-of (Math i64) i64 :merge (max old new))

; ========================================
; BASIC DEPENDENCY RULES
; ========================================

; Constants have no dependencies
(set (free-vars (Num 0.0)) (EmptySet))
(set (free-vars (Num 1.0)) (EmptySet))
(set (free-vars (Num 2.0)) (EmptySet))

; Variables contribute their index to free vars
(set (free-vars (Variable 0)) (SingleVar 0))
(set (free-vars (Variable 1)) (SingleVar 1))
(set (free-vars (Variable 2)) (SingleVar 2))

; BoundVars are not free (they're bound by lambda)
(set (free-vars (BoundVar 0)) (EmptySet))
(set (free-vars (BoundVar 1)) (EmptySet))
(set (free-vars (BoundVar 2)) (EmptySet))

; ========================================
; MEMBERSHIP CHECKING
; ========================================

; VarSet membership check (1=true, 0=false)
(set (contains-var (EmptySet) 0) 0)
(set (contains-var (EmptySet) 1) 0)
(set (contains-var (EmptySet) 2) 0)

(set (contains-var (SingleVar 0) 0) 1)
(set (contains-var (SingleVar 1) 1) 1)
(set (contains-var (SingleVar 2) 2) 1)

(set (contains-var (SingleVar 0) 1) 0)
(set (contains-var (SingleVar 0) 2) 0)
(set (contains-var (SingleVar 1) 0) 0)
(set (contains-var (SingleVar 1) 2) 0)
(set (contains-var (SingleVar 2) 0) 0)
(set (contains-var (SingleVar 2) 1) 0)

; ========================================
; INDEPENDENCE CHECKING
; ========================================

; A coefficient is independent if it doesn't contain the bound variable
(set (is-independent-of (Variable 0) 0) 1)  ; Variable 0 is independent of BoundVar 0
(set (is-independent-of (Variable 1) 0) 1)  ; Variable 1 is independent of BoundVar 0
(set (is-independent-of (Variable 0) 1) 1)  ; Variable 0 is independent of BoundVar 1
(set (is-independent-of (BoundVar 0) 0) 0)  ; BoundVar 0 is NOT independent of itself

; ========================================
; COST MODEL
; ========================================

(function cost (Math) i64 :merge (min old new))

; Basic costs
(set (cost (Num 0.0)) 0)
(set (cost (Num 1.0)) 0)
(set (cost (Variable 0)) 0)
(set (cost (Variable 1)) 0)
(set (cost (BoundVar 0)) 0)
(set (cost (BoundVar 1)) 0)

; ========================================
; TEST EXPRESSIONS
; ========================================

; Create test expressions
(let a (Variable 0))                    ; External parameter a
(let b (Variable 1))                    ; External parameter b  
(let x (BoundVar 0))                    ; Bound variable x

; Test expressions
(let sum_expr (Add a b))                ; a + b
(let product_expr (Mul a x))            ; a * x (coefficient independent of x)
(let self_product (Mul x x))            ; x * x (coefficient dependent on x)

; Compound expressions - computed dependencies
(set (free-vars sum_expr) (UnionSet (SingleVar 0) (SingleVar 1)))  ; Add a b depends on both
(set (free-vars product_expr) (SingleVar 0))                       ; Mul a x depends only on a

; ========================================
; BASIC ALGEBRAIC RULES
; ========================================

; Identity laws
(rule ((= lhs (Add ?var (Num 0.0))))
      ((union lhs ?var)))

(rule ((= lhs (Mul ?var (Num 1.0))))
      ((union lhs ?var)))

; Zero laws
(rule ((= lhs (Mul ?var (Num 0.0))))
      ((union lhs (Num 0.0))))

; Run optimization
(run 10)

; ========================================
; EXTRACT RESULTS
; ========================================

(extract a)
(extract sum_expr)
(extract product_expr)
(extract (free-vars a))
(extract (free-vars sum_expr))
(extract (is-independent-of a 0))

; âœ“ Simple dependency tracking test completed 