; Test Variable Partitioning
; Load the enhanced rules
(include "minimal_constant_prop.egg")

; Test 1: Basic like term collection
; x + x should become 2*x
(let test1 (Add (Var "x") (Var "x")))
(run-schedule (repeat 10 (saturate (run))))
(check (= test1 (Mul (Num 2.0) (Var "x"))))
(query-extract test1)

; Test 2: Coefficient addition  
; 2*x + 3*x should become 5*x
(let test2 (Add (Mul (Num 2.0) (Var "x")) (Mul (Num 3.0) (Var "x"))))
(run-schedule (repeat 10 (saturate (run))))
(check (= test2 (Mul (Num 5.0) (Var "x"))))
(query-extract test2)

; Test 3: Mixed terms - x + 2*x should become 3*x
(let test3 (Add (Var "x") (Mul (Num 2.0) (Var "x"))))
(run-schedule (repeat 10 (saturate (run))))
(check (= test3 (Mul (Num 3.0) (Var "x"))))
(query-extract test3)

; Test 4: Constants collected - 2 + 3 + x should become 5 + x
(let test4 (Add (Add (Num 2.0) (Num 3.0)) (Var "x")))
(run-schedule (repeat 10 (saturate (run))))
(check (= test4 (Add (Num 5.0) (Var "x"))))
(query-extract test4)

; Test 5: Complex partitioning challenge: 3 + 2*x + 3*y + 4 + x
; This should become: 7 + 3*x + 3*y
(let test5 (Add (Add (Add (Add (Num 3.0) (Mul (Num 2.0) (Var "x"))) 
                           (Mul (Num 3.0) (Var "y"))) 
                      (Num 4.0)) 
                 (Var "x")))
(run-schedule (repeat 20 (saturate (run))))
(query-extract test5)
; Print not supported - just continue

; Test 6: Check dependency analysis
(let test6_const (Num 42.0))
(let test6_var (Var "z"))
(let test6_expr (Add (Num 1.0) (Var "z")))
(run-schedule (repeat 5 (saturate (run))))

; Let's see if our dependency analysis works
(query-extract test6_const)
(query-extract test6_var) 
(query-extract test6_expr) 