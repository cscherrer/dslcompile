; ========================================
; SIMPLE DEPENDENCY ANALYSIS FOR SUM SPLITTING
; ========================================
; Just enough dependency analysis to make sum splitting work
; Focus on the is-independent-of predicate needed for coefficient factoring

; ========================================
; RULESETS DECLARATION (MUST BE FIRST!)
; ========================================

(ruleset dependency_analysis)
(ruleset safe_optimizations)

; ========================================
; BASIC INDEPENDENCE CHECKING
; ========================================

; We need to determine if a coefficient is independent of a bound variable
; This is a simplified approach - check if coefficient contains the bound variable

(relation is-independent-of (Math i64))

; Constants are always independent of any variable
; This rule needs to fire for all coefficients and variables, so we can't bind specific values
; Instead, we'll use a different approach - let the rewrite rules check independence directly

; UserVars are independent of bound variables (different scopes)
(rule ((= coeff (UserVar ?idx)))
      ((is-independent-of coeff ?var)))

; BoundVars are independent only if they're different variables
(rule ((= coeff (BoundVar ?var1))
       (= true (not (= ?var1 ?var2))))
      ((is-independent-of coeff ?var2)))

; Binary operations: independent if both operands are independent
(rule ((= coeff (Add ?a ?b))
       (is-independent-of ?a ?var)
       (is-independent-of ?b ?var))
      ((is-independent-of coeff ?var)))

(rule ((= coeff (Mul ?a ?b))
       (is-independent-of ?a ?var)
       (is-independent-of ?b ?var))
      ((is-independent-of coeff ?var)))

(rule ((= coeff (Sub ?a ?b))
       (is-independent-of ?a ?var)
       (is-independent-of ?b ?var))
      ((is-independent-of coeff ?var)))

(rule ((= coeff (Div ?a ?b))
       (is-independent-of ?a ?var)
       (is-independent-of ?b ?var))
      ((is-independent-of coeff ?var)))

; Unary operations: independent if operand is independent
(rule ((= coeff (Neg ?a))
       (is-independent-of ?a ?var))
      ((is-independent-of coeff ?var)))

(rule ((= coeff (Exp ?a))
       (is-independent-of ?a ?var))
      ((is-independent-of coeff ?var)))

(rule ((= coeff (Ln ?a))
       (is-independent-of ?a ?var))
      ((is-independent-of coeff ?var)))

; ========================================
; TESTING PREDICATES
; ========================================

; Helper relation to test if is-independent-of returns true
; This is needed for :when clauses in rewrite rules
(relation independence-test (Math i64 bool))

(rule ((is-independent-of ?coeff ?var))
      ((independence-test ?coeff ?var true)))

; If not provably independent, assume dependent
; (This is a safe default for correctness)