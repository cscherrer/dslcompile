[package]
name = "dslcompile"
version.workspace = true
edition.workspace = true
description = "High-performance symbolic mathematics with final tagless design, egglog optimization, and Rust hot-loading compilation"
license.workspace = true
repository.workspace = true
keywords = ["symbolic", "mathematics", "rust-codegen", "final-tagless", "optimization"]
categories = ["mathematics", "science", "compilers"]

[dependencies]
# Core numeric traits for generic operations
num-traits = "0.2"

# Procedural macros for compile-time optimization
dslcompile-macros = { version = "0.0.1", path = "../dslcompile-macros" }

# Error handling
thiserror = "1.0"

# JIT compilation with Cranelift (now default)
cranelift = { workspace = true }
cranelift-jit = { workspace = true }
cranelift-module = { workspace = true }
cranelift-codegen = { workspace = true }
cranelift-frontend = { workspace = true }
target-lexicon = { workspace = true }

# Serialization support
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Symbolic optimization with egglog
egglog = { workspace = true, optional = true }

# Dynamic library loading for Rust codegen backend
dlopen2.workspace = true

# For performance comparisons
ad_trait = { workspace = true, optional = true }
ordered-float.workspace = true

# HList support for unified variadic functions
frunk = "0.4"

anyhow = "1.0"
clap = { version = "4.0", features = ["derive"] }

egg = "0.9"
rand = "0.8"
rayon = "1.8"

[features]
default = ["optimization"]
optimization = ["dep:egglog"]
ad_trait = ["dep:ad_trait"]
all = ["optimization", "ad_trait"]

# Legacy feature aliases for backward compatibility
symbolic = ["optimization"]
jit = []  # Cranelift is now always available

[dev-dependencies]
criterion.workspace = true
divan.workspace = true
proptest.workspace = true

[[bench]]
name = "expression_optimization"
harness = false

[[bench]]
name = "simple_optimization"
harness = false

[[bench]]
name = "cranelift_vs_rust"
harness = false

[[bench]]
name = "heterogeneous_vs_cranelift"
harness = false

[[bench]]
name = "macro_vs_heterogeneous"
harness = false

[[bench]]
name = "final_performance_comparison"
harness = false



# Test configurations for procedural macro proptests
[[test]]
name = "procedural_macro_proptests"
path = "tests/procedural_macro_proptests.rs"

[[test]]
name = "macro_integration_proptests"
path = "tests/macro_integration_proptests.rs" 
