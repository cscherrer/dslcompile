; Minimal test to isolate the parsing issue

; Core datatypes
(datatype Math
  (Num f64)
  (UserVar i64)
  (BoundVar i64)
  (Add Math Math)
  (Mul Math Math)
)

(datatype Collection
  (Range Math Math)
  (DataArray i64)
)

(datatype Lambda
  (LambdaFunc i64 Math)
)

(datatype VarSet
  (EmptySet)
  (SingleVar i64)
  (UnionSet VarSet VarSet)
)

; Basic function definitions
(function free-vars (Math) VarSet :merge (UnionSet old new))
(function contains-var (VarSet i64) bool :merge (or old new))
(function is-independent-of (Math i64) bool :merge (or old new))

; Test constants
(let test_const (Num 2.0))
(let test_var (UserVar 0))
(let test_bound (BoundVar 0))

; Initialize basic dependencies  
(rule ((= expr (Num ?val)))
      ((set (free-vars expr) (EmptySet))))
(rule ((= expr (UserVar ?idx)))
      ((set (free-vars expr) (SingleVar ?idx))))
(rule ((= expr (BoundVar ?idx)))
      ((set (free-vars expr) (EmptySet))))

; Initialize membership checking - these need to be queried dynamically
; EmptySet never contains any variable
; SingleVar contains only its own variable
; These will be computed when needed

; Initialize independence checking
(rule ((= ?deps (free-vars ?expr))
       (= false (contains-var ?deps ?var)))
      ((set (is-independent-of ?expr ?var) true)))

; Test the basic pattern
(check (= (free-vars test_const) (EmptySet)))
(check (= (is-independent-of test_const 0) true))

(run 10)